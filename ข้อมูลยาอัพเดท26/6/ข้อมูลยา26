import 'package:flutter/material.dart';
import 'package:multi_select_flutter/multi_select_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'ข้อมูลของท่าน',
      theme: ThemeData(
        primaryColor: Colors.green[900],
      ),
      home: HomePage(),
    );
  }
}

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  String _userType = '';

  void _selectUserType(String type) {
    setState(() {
      _userType = type;
    });
  }

  @override
  Widget build(BuildContext context) {
    if (_userType.isEmpty) {
      return Scaffold(
        appBar: AppBar(
          title: Text('เลือกประเภทผู้ใช้'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              GestureDetector(
                onTap: () => _selectUserType('patient'),
                child: Container(
                  padding: EdgeInsets.all(16),
                  color: Colors.yellow[100],
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.medical_services, color: Colors.yellow[900]),
                      SizedBox(width: 8),
                      Text('ผู้รับประทานยา'),
                    ],
                  ),
                ),
              ),
              SizedBox(height: 20),
              GestureDetector(
                onTap: () => _selectUserType('caregiver'),
                child: Container(
                  padding: EdgeInsets.all(16),
                  color: Colors.green[100],
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.phone, color: Colors.green[900]),
                      SizedBox(width: 8),
                      Text('ผู้ติดตาม'),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      );
    } else if (_userType == 'patient') {
      return PatientFormPage(
        onSubmit: (data) {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => UserInfoPage(
                userType: 'ผู้รับประทานยา',
                userData: data,
                onChangeStatus: () {
                  setState(() {
                    _userType = '';
                  });
                  Navigator.pop(context);
                },
              ),
            ),
          );
        },
      );
    } else {
      return CaregiverFormPage(
        onSubmit: (data) {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => UserInfoPage(
                userType: 'ผู้ติดตาม',
                userData: data,
                onChangeStatus: () {
                  setState(() {
                    _userType = '';
                  });
                  Navigator.pop(context);
                },
              ),
            ),
          );
        },
      );
    }
  }
}

class PatientFormPage extends StatefulWidget {
  final Function(Map<String, String>) onSubmit;

  PatientFormPage({required this.onSubmit});

  @override
  _PatientFormPageState createState() => _PatientFormPageState();
}

class _PatientFormPageState extends State<PatientFormPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _surnameController = TextEditingController();
  final TextEditingController _idNumberController = TextEditingController();
  final TextEditingController _weightController = TextEditingController();
  final TextEditingController _heightController = TextEditingController();
  final TextEditingController _healthInfoController = TextEditingController();
  final TextEditingController _hospitalController = TextEditingController();
  final TextEditingController _appointmentHistoryController = TextEditingController();

  String _gender = 'ชาย';
  List<String> _selectedDiseases = [];
  List<String> _selectedInsurance = [];

  static List<MultiSelectItem<String>> _diseases = [
    'โรคหลอดเลือดหัวใจตีบ',
    'โรคหัวใจขาดเลือด',
    'โรคหลอดเลือดสมอง',
    'โรคเบาหวาน',
    'โรคความดันโลหิตสูง',
    'โรคปอดอุดกั้นเรื้อรัง',
    'โรคถุงลมโป่งพอง',
    'โรคหอบหืด',
    'โรคภูมิแพ้',
    'โรคกรดไหลย้อน',
    'โรคข้อเข่าเสื่อม',
    'โรคกระดูกพรุน',
    'โรคอื่นๆ'
  ].map((e) => MultiSelectItem<String>(e, e)).toList();

  static List<MultiSelectItem<String>> _insurance = [
    'ประกันสุขภาพรัฐ',
    'ประกันสุขภาพเอกชน',
    'ประกันสุขภาพบริษัท'
  ].map((e) => MultiSelectItem<String>(e, e)).toList();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('ข้อมูลผู้รับประทานยา'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                controller: _nameController,
                decoration: InputDecoration(labelText: 'ชื่อ'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'กรุณากรอกชื่อ';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _surnameController,
                decoration: InputDecoration(labelText: 'สกุล'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'กรุณากรอกสกุล';
                  }
                  return null;
                },
              ),
              DropdownButtonFormField<String>(
                value: _gender,
                decoration: InputDecoration(labelText: 'เพศ'),
                items: ['ชาย', 'หญิง', 'อื่นๆ'].map((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(value),
                  );
                }).toList(),
                onChanged: (newValue) {
                  setState(() {
                    _gender = newValue!;
                  });
                },
              ),
              TextFormField(
                controller: _idNumberController,
                decoration: InputDecoration(labelText: 'เลขบัตรประชาชน/หนังสือเดินทาง'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'กรุณากรอกเลขบัตรประชาชน';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _weightController,
                decoration: InputDecoration(labelText: 'น้ำหนัก (กิโลกรัม)'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'กรุณากรอกน้ำหนัก';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _heightController,
                decoration: InputDecoration(labelText: 'ส่วนสูง (เซนติเมตร)'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'กรุณากรอกส่วนสูง';
                  }
                  return null;
                },
              ),
              MultiSelectDialogField(
                items: _diseases,
                title: Text("ท่านมีโรคประจำตัวใดบ้าง"),
                selectedColor: Colors.green,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.all(Radius.circular(40)),
                  border: Border.all(
                    color: Colors.green,
                    width: 2,
                  ),
                ),
                buttonIcon: Icon(
                  Icons.medical_services,
                  color: Colors.green,
                ),
                buttonText: Text(
                  "เลือกโรคประจำตัว",
                  style: TextStyle(
                    color: Colors.green[900],
                    fontSize: 16,
                  ),
                ),
                onConfirm: (results) {
                  setState(() {
                    _selectedDiseases = results.cast<String>();
                  });
                },
              ),
              TextFormField(
                controller: _healthInfoController,
                decoration: InputDecoration(labelText: 'ข้อมูลสุขภาพอื่นๆ'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'กรุณากรอกข้อมูลสุขภาพ';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _hospitalController,
                decoration: InputDecoration(labelText: 'โรงพยาบาลที่ท่านใช้บริการ'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'กรุณากรอกโรงพยาบาล';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _appointmentHistoryController,
                decoration: InputDecoration(labelText: 'ประวัติการนัดหมาย'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'กรุณากรอกประวัติการนัดหมาย';
                  }
                  return null;
                },
              ),
              MultiSelectDialogField(
                items: _insurance,
                title: Text("ท่านมีประกันสุขภาพอะไรบ้าง"),
                selectedColor: Colors.green,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.all(Radius.circular(40)),
                  border: Border.all(
                    color: Colors.green,
                    width: 2,
                  ),
                ),
                buttonIcon: Icon(
                  Icons.health_and_safety,
                  color: Colors.green,
                ),
                buttonText: Text(
                  "เลือกประกันสุขภาพ",
                  style: TextStyle(
                    color: Colors.green[900],
                    fontSize: 16,
                  ),
                ),
                onConfirm: (results) {
                  setState(() {
                    _selectedInsurance = results.cast<String>();
                  });
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    widget.onSubmit({
                      'name': _nameController.text,
                      'surname': _surnameController.text,
                      'gender': _gender,
                      'idNumber': _idNumberController.text,
                      'weight': _weightController.text,
                      'height': _heightController.text,
                      'diseases': _selectedDiseases.join(', '),
                      'healthInfo': _healthInfoController.text,
                      'hospital': _hospitalController.text,
                      'appointmentHistory': _appointmentHistoryController.text,
                      'insurance': _selectedInsurance.join(', '),
                    });
                  }
                },
                child: Text('บันทึก'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class CaregiverFormPage extends StatefulWidget {
  final Function(Map<String, String>) onSubmit;

  CaregiverFormPage({required this.onSubmit});

  @override
  _CaregiverFormPageState createState() => _CaregiverFormPageState();
}

class _CaregiverFormPageState extends State<CaregiverFormPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _surnameController = TextEditingController();
  final TextEditingController _idNumberController = TextEditingController();
  final TextEditingController _phoneNumberController = TextEditingController();
  final TextEditingController _alternativePhoneNumberController = TextEditingController();
  final TextEditingController _lineIdController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('ข้อมูลผู้ติดตาม'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                controller: _nameController,
                decoration: InputDecoration(labelText: 'ชื่อ'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'กรุณากรอกชื่อ';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _surnameController,
                decoration: InputDecoration(labelText: 'สกุล'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'กรุณากรอกสกุล';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _idNumberController,
                decoration: InputDecoration(labelText: 'เลขบัตรประชาชน/หนังสือเดินทาง'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'กรุณากรอกเลขบัตรประชาชน';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _phoneNumberController,
                decoration: InputDecoration(labelText: 'เบอร์โทรศัพท์'),
                keyboardType: TextInputType.phone,
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'กรุณากรอกเบอร์โทรศัพท์';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _alternativePhoneNumberController,
                decoration: InputDecoration(labelText: 'เบอร์โทรศัพท์ทางเลือก'),
                keyboardType: TextInputType.phone,
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'กรุณากรอกเบอร์โทรศัพท์ทางเลือก';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _lineIdController,
                decoration: InputDecoration(labelText: 'LINE ID'),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'กรุณากรอก LINE ID';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    widget.onSubmit({
                      'name': _nameController.text,
                      'surname': _surnameController.text,
                      'idNumber': _idNumberController.text,
                      'phoneNumber': _phoneNumberController.text,
                      'alternativePhoneNumber': _alternativePhoneNumberController.text,
                      'lineId': _lineIdController.text,
                    });
                  }
                },
                child: Text('บันทึก'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class UserInfoPage extends StatelessWidget {
  final String userType;
  final Map<String, String> userData;
  final VoidCallback onChangeStatus;

  UserInfoPage({
    required this.userType,
    required this.userData,
    required this.onChangeStatus,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('ข้อมูลของท่าน'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('ประเภทผู้ใช้: $userType', style: Theme.of(context).textTheme.headlineSmall),
            SizedBox(height: 20),
            ...userData.entries.map((entry) {
              return Text('${entry.key}: ${entry.value}', style: Theme.of(context).textTheme.bodyLarge);
            }).toList(),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: onChangeStatus,
              child: Text('เปลี่ยนสถานะผู้ใช้'),
            ),
          ],
        ),
      ),
    );
  }
}

https://chatgpt.com/share/54bab9fd-0544-483b-ab06-9667b927b350
